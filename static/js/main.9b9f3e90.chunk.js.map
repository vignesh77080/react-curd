{"version":3,"sources":["AppsComponents/form.module.css","AppsComponents/listview.module.css","App.module.css","AppsComponents/Form.js","AppsComponents/ListView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","form","props","state","upState","arr","index","className","styles","onSubmit","onupdate","htmlFor","id","name","onChange","e","onupdatechange","value","autoComplete","job","type","onsubmit","onchange","ListView","listitems","ondelete","onclickupdate","length","map","items","key","onClick","App","initialstate","handleChange","bind","handleSubmit","handleDelete","handleOnUpdate","handleClickUpdate","handleUpdateChange","target","this","setState","preventDefault","newItems","Date","now","item","newArr","slice","findItem","find","indexOf","splice","console","log","itemChange","Form","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9b9f3e90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_wrap\":\"form_input_wrap__X-1ON\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list_wrap\":\"listview_list_wrap__17io-\",\"ul_wrap\":\"listview_ul_wrap__25lZ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2_Z0h\"};","import React from 'react';\r\nimport styles from './form.module.css';\r\n\r\nconst form = (props)=>{\r\n\r\n    if(props.state.upState){\r\n        const {arr, index} = props.state\r\n        return (\r\n            <div className={styles['whole_form']}>\r\n                <form onSubmit={props.onupdate}>\r\n                    <div className={styles['input_wrap']}>\r\n                        <label htmlFor='in-name' > Name </label>\r\n                        <input id='in-name' \r\n                            name='name' \r\n                            onChange={(e)=>props.onupdatechange(e, index)} \r\n                            value={arr[index].name} \r\n                            autoComplete = 'off'\r\n                        />\r\n                    </div>\r\n                    <div className={styles['input_wrap']}>\r\n                        <label htmlFor='in-job' > Job </label>\r\n                        <input id='in-job' \r\n                            name='job' \r\n                            onChange={(e)=> props.onupdatechange(e, index)} \r\n                            value={arr[index].job} \r\n                            autoComplete = 'off'\r\n                        />\r\n                    </div>\r\n                    <input type='submit' value='update'/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className={styles['whole_form']}>\r\n            <form onSubmit={props.onsubmit}>\r\n                <div className={styles['input_wrap']}>\r\n                    <label htmlFor='in-name' > Name </label>\r\n                    <input id='in-name' \r\n                        name='name' \r\n                        onChange={props.onchange} \r\n                        value={props.state.name} \r\n                        autoComplete = 'off'\r\n                    />\r\n                </div>\r\n                <div className={styles['input_wrap']}>\r\n                    <label htmlFor='in-job' > Job </label>\r\n                    <input id='in-job' \r\n                        name='job' \r\n                        onChange={props.onchange} \r\n                        value={props.state.job} \r\n                        autoComplete = 'off'\r\n                    />\r\n                </div>\r\n                <input type='submit' value='submit'/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default form;","import React from 'react';\r\nimport styles from './listview.module.css';\r\n\r\nconst ListView = ({listitems, ondelete, onclickupdate}) => {\r\n    return (\r\n        <div className={styles['list_wrap']}>\r\n            <ul className={styles['ul_wrap']}>\r\n                {listitems.length > 0 && \r\n                    <li> \r\n                        <span> Name </span>\r\n                        <span> Job </span>\r\n                        <span> Update </span>\r\n                        <span> Remove </span>\r\n                    </li>\r\n                }\r\n                {listitems.map((items) => {\r\n                    return <li key={items.id} > \r\n                        <span> {items.name} </span>\r\n                        <span> {items.job} </span>\r\n                        <span> <input type='button' value='UPDATE' onClick={() => onclickupdate(items)}/> </span>\r\n                        <span> <input type='button' value='DELETE' onClick={() => ondelete(items)}/> </span>\r\n                    </li>\r\n                } )}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListView;","import React from 'react';\nimport Form from './AppsComponents/Form';\nimport ListView from './AppsComponents/ListView';\n\nimport styles from './App.module.css';\n\nclass App extends React.Component{\n\n\n  constructor(props){\n    super(props);\n    this.initialstate = {\n      name : '',\n      job : '',\n      arr : [],\n      upState : false,\n      index : 0\n    }\n    this.state = this.initialstate\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleOnUpdate = this.handleOnUpdate.bind(this);\n    this.handleClickUpdate = this.handleClickUpdate.bind(this);\n    this.handleUpdateChange = this.handleUpdateChange.bind(this);\n  }\n\n  handleChange(e){\n    let value = e.target\n\n    this.setState({\n      [value.name] : value.value\n    })\n\n  }\n\n  handleSubmit(e){\n    e.preventDefault();\n\n    let name = this.state.name;\n    let job = this.state.job;\n\n    if(name.length === 0 || job.length === 0){\n      return ;\n    }\n\n    let newItems = {\n      name : name,\n      job : job,\n      id : Date.now()\n    }\n\n    this.setState({\n      arr : [...this.state.arr, newItems],\n      name : '',\n      job : ''\n    })\n\n  }\n\n  handleDelete(item){\n\n    let newArr = this.state.arr.slice();\n\n    let findItem = newArr.find((items) => {\n        return items.id === item.id\n    })\n    \n    let index = newArr.indexOf(findItem);\n\n    newArr.splice(index, 1)\n    this.setState({\n      arr : newArr\n    })\n    \n  }\n\n  handleOnUpdate(e){\n    e.preventDefault();\n    this.setState({\n      upState : false,\n      name : '',\n      job : ''\n    })\n  }\n\n  handleClickUpdate(item){\n    this.setState({\n      upState : true\n    })\n    console.log('hello abae', item)\n\n    let newArr = this.state.arr.slice();\n\n    let findItem = newArr.find((items) => {\n      return items.id === item.id\n    })\n    \n    let index = newArr.indexOf(findItem);\n    \n    this.setState({\n      index : index\n    })    \n\n  }\n\n  handleUpdateChange(e, index){\n    const {name , value} = e.target\n\n    let itemChange = this.state.arr.slice();\n    itemChange[index][name] = value\n\n    this.setState({\n      arr : itemChange,\n    })\n\n  }\n\n  render(){\n\n    let {arr} = this.state;\n\n    return(\n      <div className={styles['app']}>\n        <h1> React App </h1>\n        <p> This app is an example of CURD operations </p>\n        <Form \n          onupdate={this.handleOnUpdate}\n          onsubmit={this.handleSubmit} \n          onchange={this.handleChange} \n          onupdatechange = {this.handleUpdateChange}\n          state ={this.state} />\n        <ListView \n          listitems={arr} \n          ondelete={this.handleDelete}\n          onclickupdate={this.handleClickUpdate} />\n      </div>\n    )\n  }\n\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}